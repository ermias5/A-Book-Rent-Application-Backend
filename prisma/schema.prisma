generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  OWNER
  ADMIN
}

model User {
   id         Int    @id @default(autoincrement())
  name        String?
  email       String @unique
  password    String 
  PhoneNumber String?
  location    String?
  role        Role @default(OWNER)
  isApproved  Boolean @default(false)
  rentals     Rental[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Notification Notification[]
}  

model Admin {
   id       Int     @id @default(autoincrement())
  userId    String   @unique
  // user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Owner {
    id      Int     @id @default(autoincrement())
  userId    String   @unique
  // user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  books     Book[]
  wallet    Wallet?
}

model Book {
   id              Int     @id @default(autoincrement())
  title            String
  description      String
  author           String
  publishedDate    DateTime?
  ownerId          Int
  owner            Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentals          Rental[]
  categoryId       Int?
  category         Category? @relation(fields: [categoryId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

model Category {
  id        Int     @id @default(autoincrement())
  name      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books Book[]
}

model Rental {
 id        Int     @id @default(autoincrement())
 book      Book @relation(fields: [bookId], references: [id])
 bookId    Int
 user      User @relation(fields: [userId], references: [id])
 userId    Int
 startDate DateTime
 endDate   DateTime
}

model Wallet {
   id       Int     @id @default(autoincrement())
  balance   Float    @default(0.0)
  ownerId   Int   @unique
  owner     Owner    @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model Notification {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
//   message   String
//   isRead    Boolean  @default(false)
//   createdAt DateTime @default(now())
// }