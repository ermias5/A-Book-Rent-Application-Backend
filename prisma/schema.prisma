generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  OWNER
  ADMIN
}

model User {
  id          String @id @default(uuid())
  name        String? @unique
  email       String @unique
  password    String 
  PhoneNumber String?
  location    String?
  role        Role @default(ADMIN)
  isApproved  Boolean @default(true)
  rentals     Rental[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Notification Notification[]
}  

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  // user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Owner {
  id        String   @id @default(uuid())
  userId    String   @unique
  // user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  books     Book[]
  wallet    Wallet?
}

model Book {
  id               String   @id @default(uuid())
  title            String
  description      String
  author           String
  publishedDate    DateTime?
  ownerId          String
  owner            Owner    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rentals          Rental[]
  categoryId  String?
  category   Category? @relation(fields: [categoryId], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}

model Category {
  id        String @id @default(uuid())
  name      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books Book[]
}

model Rental {
 id        String @id @default(uuid())
 book      Book @relation(fields: [bookId], references: [id])
 bookId    String
 user      User @relation(fields: [userId], references: [id])
 userId    String
 startDate DateTime
 endDate   DateTime
}

model Wallet {
  id        String   @id @default(uuid())
  balance   Float    @default(0.0)
  ownerId   String   @unique
  owner     Owner    @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}